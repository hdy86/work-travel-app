{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","AsyncStorage","setItem","JSON","stringify","s","getItem","parse","addToDo","newToDos","Date","now","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","btnText","color","TextInput","input","placeholder","returnKeyType","value","onChangeText","payload","onSubmitEditing","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"yRAAaA,EACP,QADOA,EAEL,UAFKA,EAGH,U,wkBCeK,SAASC,IACtB,MAA8BC,oBAAS,GAAvC,WAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,WAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,IAAnC,WAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,OAGF,IAGMC,EAAS,sBAAG,UAAOC,SACjBC,UAAaC,QAfH,SAewBC,KAAKC,UAAUJ,OAD1C,sDAGTF,EAAS,sBAAG,YAChB,IAAMO,QAAUJ,UAAaK,QAlBb,UAmBZD,GACFT,EAASO,KAAKI,MAAMF,OAHT,qDAMTG,EAAO,sBAAG,YACd,GAAa,KAATf,EAAJ,CAGA,IAAMgB,EAAQ,OAAQd,GAAR,UAAgBe,KAAKC,MAAQ,CAAElB,OAAMF,aACnDK,EAASa,SACHV,EAAUU,GAChBf,EAAQ,QAPG,qDAmCb,OACE,eAACkB,EAAA,QAAD,CAAMC,MAAOC,EAAOC,UAApB,UACE,cAACC,EAAA,UAAD,CAAWH,MAAM,SACjB,eAACD,EAAA,QAAD,CAAMC,MAAOC,EAAOG,OAApB,UACE,cAACC,EAAA,QAAD,CAAkBC,QAlDX,kBAAM3B,GAAW,IAkDxB,SACE,cAAC4B,EAAA,QAAD,CACEP,MAAK,OAAOC,EAAOO,SAAd,IAAuBC,MAAO/B,EAAU,QAAUH,IADzD,oBAMF,cAAC8B,EAAA,QAAD,CAAkBC,QA1DT,kBAAM3B,GAAW,IA0D1B,SACE,cAAC4B,EAAA,QAAD,CACEP,MAAK,OACAC,EAAOO,SADP,IAEHC,MAAQ/B,EAAoBH,EAAV,UAHtB,yBAUJ,cAACmC,EAAA,QAAD,CACEV,MAAOC,EAAOU,MACdC,YAAalC,EAAU,cAAgB,2BACvCmC,cAAc,OACdC,MAAOlC,EACPmC,aAxEe,SAACC,GAAD,OAAanC,EAAQmC,IAyEpCC,gBAAiBtB,IAEnB,cAACuB,EAAA,QAAD,UACGC,OAAOC,KAAKtC,GAAOuC,KAAI,SAACC,GAAD,OACtBxC,EAAMwC,GAAK5C,UAAYA,EACrB,eAACqB,EAAA,QAAD,CAAMC,MAAOC,EAAOsB,KAApB,UACE,cAAChB,EAAA,QAAD,CAAMP,MAAOC,EAAOuB,SAApB,SAA+B1C,EAAMwC,GAAK1C,OAC1C,cAACyB,EAAA,QAAD,CAAkBC,QAAS,kBA7DpB,SAACgB,GAClB,GAAoB,QAAhBG,UAASC,IAEX,GADWC,QAAQ,qCACX,CACN,IAAM/B,EAAQ,KAAQd,UACfc,EAAS0B,GAChBvC,EAASa,GACTV,EAAUU,SAGZgC,UAAMC,MAAM,eAAgB,gBAAiB,CAC3C,CAAEjD,KAAM,UACR,CACEA,KAAM,OACN0B,QAAS,WACP,IAAMV,EAAQ,KAAQd,UACfc,EAAS0B,GAChBvC,EAASa,GACTV,EAAUU,OA2CyBkC,CAAWR,IAA5C,SACE,cAACf,EAAA,QAAD,UACE,cAACwB,EAAA,QAAD,CAAUC,KAAK,QAAQC,KAAM,GAAIxB,MAAOlC,UAJf+C,GAQ7B,aAOd,IAAMrB,EAASiC,UAAWC,OAAO,CAC/BjC,UAAW,CACTkC,KAAM,EACNC,gBAAiB9D,EACjB+D,kBAAmB,IAErBlC,OAAQ,CACNmC,eAAgB,gBAChBC,cAAe,MACfC,UAAW,KAEbjC,QAAS,CACPkC,SAAU,GACVC,WAAY,MACZlC,MAAO,SAETE,MAAO,CACL0B,gBAAiB,QACjBO,gBAAiB,GACjBN,kBAAmB,GACnBO,aAAc,GACdC,eAAgB,GAChBJ,SAAU,IAEZnB,KAAM,CACJc,gBAAiB9D,EACjBwE,aAAc,GACdH,gBAAiB,GACjBN,kBAAmB,GACnBO,aAAc,GACdL,cAAe,MACfQ,WAAY,SACZT,eAAgB,iBAElBf,SAAU,CACRf,MAAO,QACPiC,SAAU,GACVC,WAAY,U","file":"static/js/app.73b3bd39.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3a3d40\",\r\n  toDoBg: \"#1A1C20\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n\n  useEffect(() => {\n    loadToDos();\n  });\n\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n  };\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = { ...toDos, [Date.now()]: { text, working } };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"Sure\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n    return;\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{ ...styles.btnText, color: working ? \"white\" : theme.grey }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        style={styles.input}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        returnKeyType=\"done\"\n        value={text}\n        onChangeText={onChangeText}\n        onSubmitEditing={addToDo}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Text>\n                  <Fontisto name=\"trash\" size={18} color={theme.grey} />\n                </Text>\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: \"600\",\n    color: \"white\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}